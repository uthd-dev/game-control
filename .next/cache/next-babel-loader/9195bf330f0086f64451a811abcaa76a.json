{"ast":null,"code":"import Twitch from \"@d-fischer/passport-twitch\";\nimport User from \"../db/schema/users\";\nexport default new Twitch.Strategy({\n  clientID: process.env.twitchClientId,\n  clientSecret: process.env.twitchClientSecret,\n  callbackURL: `${process.env.HOST_URL}/api/auth/twitch/callback`,\n  scope: \"user:read:email\"\n}, (accessToken, refreshToken, profile, done) => {\n  User.findOne({\n    twitchId: profile.id\n  }, function (err, user) {\n    //Error first\n    if (err) {\n      return done(err);\n    } //Make sure user does not already exist\n\n\n    if (!user) {\n      //Create new user with these default values (follows schema in lib/db/schema/)\n      user = new User({\n        twitchId: profile.id,\n        fname: \"\",\n        tel: \"\",\n        displayName: profile.display_name,\n        email: profile.email,\n        username: profile.login,\n        profileImg: profile.profile_image_url,\n        provider: \"twitch\",\n        stats: {\n          //TODO: Turn shards into and object with a key for each streamer that the user has shards for\n          //eg. Global Shards ---> Per streamer shards\n          shards: 100\n        },\n        ign: \"\",\n        streamer: {\n          onboardingStarted: false,\n          approved: false,\n          live: false\n        },\n        permLevel: 0,\n        online: false\n      });\n      user.save(function (err) {\n        if (err) console.log(err);\n        return done(err, user);\n      });\n    } else {\n      return done(err, user);\n    }\n  });\n});","map":null,"metadata":{},"sourceType":"module"}