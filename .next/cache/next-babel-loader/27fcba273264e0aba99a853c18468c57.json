{"ast":null,"code":"import Twitch from \"@d-fischer/passport-twitch\";\nimport User from \"../db/schema/users\";\nexport default new Twitch.Strategy({\n  clientID: process.env.twitchClientId,\n  clientSecret: process.env.twitchClientSecret,\n  callbackURL: `${process.env.HOST_URL}/api/auth/twitch/callback`,\n  scope: \"user:read:email\"\n}, (accessToken, refreshToken, profile, done) => {\n  User.findOne({\n    twitchId: profile.id\n  }, function (err, user) {\n    //Error first\n    if (err) {\n      return done(err);\n    } //Make sure user does not already exist\n\n\n    if (!user) {\n      //Create new user with these default values (follows schema in lib/db/schema/)\n      user = new User({\n        twitchId: profile.id,\n        fname: \"\",\n        tel: \"\",\n        displayName: profile.display_name,\n        email: profile.email,\n        username: profile.login,\n        profileImg: profile.profile_image_url,\n        provider: \"twitch\",\n        stats: {\n          //TODO: Turn shards into and object with a key for each streamer that the user has shards for\n          //eg. Global Shards ---> Per streamer shards\n          shards: 100\n        },\n        ign: \"\",\n        streamer: {\n          onboardingStarted: false,\n          approved: false,\n          live: false\n        },\n        permLevel: 0,\n        online: false\n      });\n      user.save(function (err) {\n        if (err) console.log(err);\n        return done(err, user);\n      });\n    } else {\n      return done(err, user);\n    }\n  });\n});","map":{"version":3,"sources":["D:/Dev/GitHub/game-control/lib/auth/passport-twitch.js"],"names":["Twitch","User","Strategy","clientID","process","env","twitchClientId","clientSecret","twitchClientSecret","callbackURL","HOST_URL","scope","accessToken","refreshToken","profile","done","findOne","twitchId","id","err","user","fname","tel","displayName","display_name","email","username","login","profileImg","profile_image_url","provider","stats","shards","ign","streamer","onboardingStarted","approved","live","permLevel","online","save","console","log"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,4BAAnB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AAEA,eAAe,IAAID,MAAM,CAACE,QAAX,CACb;AACEC,EAAAA,QAAQ,EAAEC,OAAO,CAACC,GAAR,CAAYC,cADxB;AAEEC,EAAAA,YAAY,EAAEH,OAAO,CAACC,GAAR,CAAYG,kBAF5B;AAGEC,EAAAA,WAAW,EAAG,GAAEL,OAAO,CAACC,GAAR,CAAYK,QAAS,2BAHvC;AAIEC,EAAAA,KAAK,EAAE;AAJT,CADa,EAOb,CAACC,WAAD,EAAcC,YAAd,EAA4BC,OAA5B,EAAqCC,IAArC,KAA8C;AAC5Cd,EAAAA,IAAI,CAACe,OAAL,CAAa;AAAEC,IAAAA,QAAQ,EAAEH,OAAO,CAACI;AAApB,GAAb,EAAuC,UAAUC,GAAV,EAAeC,IAAf,EAAqB;AACxD;AACA,QAAID,GAAJ,EAAS;AACP,aAAOJ,IAAI,CAACI,GAAD,CAAX;AACD,KAJuD,CAKxD;;;AACA,QAAI,CAACC,IAAL,EAAW;AACT;AACAA,MAAAA,IAAI,GAAG,IAAInB,IAAJ,CAAS;AACdgB,QAAAA,QAAQ,EAAEH,OAAO,CAACI,EADJ;AAEdG,QAAAA,KAAK,EAAE,EAFO;AAGdC,QAAAA,GAAG,EAAE,EAHS;AAIdC,QAAAA,WAAW,EAAET,OAAO,CAACU,YAJP;AAKdC,QAAAA,KAAK,EAAEX,OAAO,CAACW,KALD;AAMdC,QAAAA,QAAQ,EAAEZ,OAAO,CAACa,KANJ;AAOdC,QAAAA,UAAU,EAAEd,OAAO,CAACe,iBAPN;AAQdC,QAAAA,QAAQ,EAAE,QARI;AASdC,QAAAA,KAAK,EAAE;AACL;AACA;AACAC,UAAAA,MAAM,EAAE;AAHH,SATO;AAcdC,QAAAA,GAAG,EAAE,EAdS;AAedC,QAAAA,QAAQ,EAAE;AACRC,UAAAA,iBAAiB,EAAE,KADX;AAERC,UAAAA,QAAQ,EAAE,KAFF;AAGRC,UAAAA,IAAI,EAAE;AAHE,SAfI;AAoBdC,QAAAA,SAAS,EAAE,CApBG;AAqBdC,QAAAA,MAAM,EAAE;AArBM,OAAT,CAAP;AAuBAnB,MAAAA,IAAI,CAACoB,IAAL,CAAU,UAAUrB,GAAV,EAAe;AACvB,YAAIA,GAAJ,EAASsB,OAAO,CAACC,GAAR,CAAYvB,GAAZ;AACT,eAAOJ,IAAI,CAACI,GAAD,EAAMC,IAAN,CAAX;AACD,OAHD;AAID,KA7BD,MA6BO;AACL,aAAOL,IAAI,CAACI,GAAD,EAAMC,IAAN,CAAX;AACD;AACF,GAtCH;AAuCD,CA/CY,CAAf","sourcesContent":["import Twitch from \"@d-fischer/passport-twitch\";\r\nimport User from \"../db/schema/users\"\r\n\r\nexport default new Twitch.Strategy(\r\n  {\r\n    clientID: process.env.twitchClientId,\r\n    clientSecret: process.env.twitchClientSecret,\r\n    callbackURL: `${process.env.HOST_URL}/api/auth/twitch/callback`,\r\n    scope: \"user:read:email\",\r\n  },\r\n  (accessToken, refreshToken, profile, done) => {\r\n    User.findOne({ twitchId: profile.id }, function (err, user) {\r\n        //Error first\r\n        if (err) {\r\n          return done(err);\r\n        }\r\n        //Make sure user does not already exist\r\n        if (!user) {\r\n          //Create new user with these default values (follows schema in lib/db/schema/)\r\n          user = new User({\r\n            twitchId: profile.id,\r\n            fname: \"\",\r\n            tel: \"\",\r\n            displayName: profile.display_name,\r\n            email: profile.email,\r\n            username: profile.login,\r\n            profileImg: profile.profile_image_url,\r\n            provider: \"twitch\",\r\n            stats: {\r\n              //TODO: Turn shards into and object with a key for each streamer that the user has shards for\r\n              //eg. Global Shards ---> Per streamer shards\r\n              shards: 100,\r\n            },\r\n            ign: \"\",\r\n            streamer: {\r\n              onboardingStarted: false,\r\n              approved: false,\r\n              live: false,\r\n            },\r\n            permLevel: 0,\r\n            online: false,\r\n          });\r\n          user.save(function (err) {\r\n            if (err) console.log(err);\r\n            return done(err, user);\r\n          });\r\n        } else {\r\n          return done(err, user);\r\n        }\r\n      });\r\n  }\r\n);\r\n"]},"metadata":{},"sourceType":"module"}