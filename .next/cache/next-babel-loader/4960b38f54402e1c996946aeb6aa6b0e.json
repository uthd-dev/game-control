{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport session from \"express-session\";\nimport connectMongo from \"connect-mongo\";\nimport uid from \"uid-safe\";\nconst MongoStore = connectMongo(session);\nconst sessionConfig = {\n  secret: uid.sync(18),\n  cookie: {\n    maxAge: 28800 * 1000 // 8 hours in milliseconds\n\n  },\n  resave: false,\n  saveUninitialized: true\n};\nexport default function sessionMiddleware(req, res, next) {\n  const mongoStore = new MongoStore({\n    client: global.mongoose,\n    stringify: false\n  });\n  return session(_objectSpread(_objectSpread({}, sessionConfig), {}, {\n    store: new MongoStore({\n      url: process.env.dbConnUr\n    })\n  }))(req, res, next);\n}","map":{"version":3,"sources":["D:/Dev/GitHub/game-control/middleware/session.js"],"names":["session","connectMongo","uid","MongoStore","sessionConfig","secret","sync","cookie","maxAge","resave","saveUninitialized","sessionMiddleware","req","res","next","mongoStore","client","global","mongoose","stringify","store","url","process","env","dbConnUr"],"mappings":";;;;;;AAAA,OAAOA,OAAP,MAAoB,iBAApB;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,OAAOC,GAAP,MAAgB,UAAhB;AAEA,MAAMC,UAAU,GAAGF,YAAY,CAACD,OAAD,CAA/B;AAEA,MAAMI,aAAa,GAAG;AACpBC,EAAAA,MAAM,EAAEH,GAAG,CAACI,IAAJ,CAAS,EAAT,CADY;AAEpBC,EAAAA,MAAM,EAAE;AACNC,IAAAA,MAAM,EAAE,QAAQ,IADV,CACgB;;AADhB,GAFY;AAKpBC,EAAAA,MAAM,EAAE,KALY;AAMpBC,EAAAA,iBAAiB,EAAE;AANC,CAAtB;AASA,eAAe,SAASC,iBAAT,CAA2BC,GAA3B,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2C;AAC1D,QAAMC,UAAU,GAAG,IAAIZ,UAAJ,CAAe;AAC9Ba,IAAAA,MAAM,EAAEC,MAAM,CAACC,QADe;AAE9BC,IAAAA,SAAS,EAAE;AAFmB,GAAf,CAAnB;AAIE,SAAOnB,OAAO,iCACTI,aADS;AAEZgB,IAAAA,KAAK,EAAE,IAAIjB,UAAJ,CAAe;AAAEkB,MAAAA,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC;AAAnB,KAAf;AAFK,KAAP,CAGJZ,GAHI,EAGCC,GAHD,EAGMC,IAHN,CAAP;AAID","sourcesContent":["import session from \"express-session\";\r\nimport connectMongo from \"connect-mongo\";\r\nimport uid from \"uid-safe\";\r\n\r\nconst MongoStore = connectMongo(session);\r\n\r\nconst sessionConfig = {\r\n  secret: uid.sync(18),\r\n  cookie: {\r\n    maxAge: 28800 * 1000, // 8 hours in milliseconds\r\n  },\r\n  resave: false,\r\n  saveUninitialized: true,\r\n};\r\n\r\nexport default function sessionMiddleware(req, res, next) {\r\nconst mongoStore = new MongoStore({\r\n    client: global.mongoose,\r\n    stringify: false,\r\n    });\r\n  return session({\r\n    ...sessionConfig,\r\n    store: new MongoStore({ url: process.env.dbConnUr })\r\n  })(req, res, next);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}