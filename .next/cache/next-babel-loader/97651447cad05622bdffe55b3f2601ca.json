{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\Dev\\\\GitHub\\\\game-control\\\\lib\\\\hooks.jsx\",\n    _s = $RefreshSig$();\n\nimport useSWR from 'swr';\n\nvar fetcher = function fetcher(url) {\n  return fetch(url).then(function (res) {\n    return res.json();\n  });\n};\n\nexport function useUser() {\n  _s();\n\n  var _useSWR = useSWR('/api/user', fetcher),\n      data = _useSWR.data,\n      error = _useSWR.error;\n\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"failed to load\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 23\n  }, this);\n  if (!data) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"hello \", data.name, \"!\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 10\n  }, this);\n}\n\n_s(useUser, \"r2QYs02BSrn+Eu/1uMGZi8N+HnQ=\", false, function () {\n  return [useSWR];\n});","map":{"version":3,"sources":["D:/Dev/GitHub/game-control/lib/hooks.jsx"],"names":["useSWR","fetcher","url","fetch","then","res","json","useUser","data","error","name"],"mappings":";;;;;AAAA,OAAOA,MAAP,MAAmB,KAAnB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,GAAD;AAAA,SAASC,KAAK,CAACD,GAAD,CAAL,CAAWE,IAAX,CAAgB,UAACC,GAAD;AAAA,WAASA,GAAG,CAACC,IAAJ,EAAT;AAAA,GAAhB,CAAT;AAAA,CAAhB;;AAEA,OAAO,SAASC,OAAT,GAAmB;AAAA;;AAAA,gBACEP,MAAM,CAAC,WAAD,EAAcC,OAAd,CADR;AAAA,MACdO,IADc,WACdA,IADc;AAAA,MACRC,KADQ,WACRA,KADQ;;AAEtB,MAAIA,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAI,CAACD,IAAL,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACX,sBAAO;AAAA,yBAAYA,IAAI,CAACE,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GALeH,O;UACYP,M","sourcesContent":["import useSWR from 'swr';\r\n\r\nconst fetcher = (url) => fetch(url).then((res) => res.json());\r\n\r\nexport function useUser() {\r\n    const { data, error } = useSWR('/api/user', fetcher);\r\n    if (error) return <div>failed to load</div>\r\n  if (!data) return <div>loading...</div>\r\n  return <div>hello {data.name}!</div>\r\n}"]},"metadata":{},"sourceType":"module"}