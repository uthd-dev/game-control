{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport session from \"express-session\";\nimport connectMongo from \"connect-mongo\";\nimport uid from \"uid-safe\";\nconst MongoStore = connectMongo(session);\nconst sessionConfig = {\n  secret: uid.sync(18),\n  cookie: {\n    maxAge: 28800 * 1000 // 8 hours in milliseconds\n\n  },\n  resave: false,\n  saveUninitialized: false\n};\nexport default function sessionMiddleware(req, res, next) {\n  const mongoStore = new MongoStore({\n    mongooseConnection: global.mongoose.connection\n  });\n  return session(_objectSpread(_objectSpread({}, sessionConfig), {}, {\n    store: mongoStore\n  }))(req, res, next);\n}","map":null,"metadata":{},"sourceType":"module"}